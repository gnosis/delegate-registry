{
  "language": "Solidity",
  "sources": {
    "contracts/Delegates.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.17;\n\nstruct Delegation {\n    bytes32 delegate;\n    uint256 ratio;\n}\n\ncontract Delegates {\n    event DelegationUpdated(\n        address indexed account,\n        string context,\n        Delegation[] previousDelegation,\n        Delegation[] delegation,\n        uint256 expirationTimestamp\n    );\n\n    /// @dev Sets a delegate for the msg.sender and a specific context.\n    /// @param context ID of the context in which delegation should be set.\n    /// @param delegation Array of delegations. Must be sorted in numerical order, from smallest to largets.\n    /// @param expirationTimestamp Unix timestamp for at which this delegation should expire.\n    /// @notice setDelegation() will overrite the user's previous delegation for the given context.\n    function setDelegation(\n        address delegator,\n        string memory context,\n        Delegation[] memory delegation,\n        uint256 expirationTimestamp\n    ) public {\n        Delegation[] memory empty;\n\n        emit DelegationUpdated(\n            delegator,\n            context,\n            empty,\n            delegation,\n            expirationTimestamp\n        );\n    }\n\n    function test() public {\n        //bool test = true;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}