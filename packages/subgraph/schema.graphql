type Account @entity(immutable: true) {
  id: ID! # address to identify delegate
  incomingDelegations: [Delegation!]! @derivedFrom(field: "toAccount")
  optouts: [Optout!]! @derivedFrom(field: "account")
  outgoingDelegationSets: [DelegationSet!]! @derivedFrom(field: "fromAccount")
}

type Context @entity(immutable: true) {
  id: ID! # string to identify context
  delegationSets: [DelegationSet!]! @derivedFrom(field: "inContext")
  optouts: [Optout!]! @derivedFrom(field: "inContext")
}

type DelegationSet @entity {
  id: ID! # `${inContext.id}-${fromAccount.id}-${creationTimestamp}`
  fromAccount: Account! # from address
  inContext: Context! # snapshot space
  creationTimestamp: BigInt! # creation timestamp for this delegation set
  expireTimestamp: BigInt # timestamp when it expired (if it already did), or when it will expire in the future. Empty delegation sets never expires
  delegations: [Delegation!]! @derivedFrom(field: "belongsToDelegationSet")
  denominator: BigInt!
}

type Optout @entity(immutable: true) {
  id: ID! # `${inContext.id}-${account.id}-${creationTimestamp}`
  inContext: Context!
  account: Account!
  status: Boolean!
  creationTimestamp: BigInt!
}

type Delegation @entity(immutable: true) {
  id: ID! # `${belongsToDelegationSet.id}-${toAccount.id}`
  toAccount: Account! # to address
  belongsToDelegationSet: DelegationSet! # the delegation set, that this delegation belongs to
  numerator: BigInt!
}
